# action.yml
name: 'Cargo ChecktCT'
description: 'Run cargo-checkct'
inputs:
  directory: # Target workspace
    description: 'path to the target workspace (containing the checkct directory)'
    required: true
  binsec-version:  # Binsec version to use
    description: 'binsec version'
    required: false
    default: '0.10.0'
  unisim-version:  # Unisim_archisec version to use
    description: 'unisim_archisec version'
    required: false
    default: '0.0.10'
  cargo-checkct-ref:  # Cargo-checkct's reference to use
    description: 'Cargo-checkct reference'
    required: false
    default: 'f7bc61f5ad08dedece61ec199911f6ecd3272eeb'
  skip-unknown: # Don't fail if binsec result status is unknown
    description: 'do not raise an error if binsec cannot conclude on the tested implementation'
    required: false
    default: 'false'
  timeout: # Timeout
    description: 'cargo-checktct timeout in seconds'
    required: false
    default: '600'

runs:
  using: "composite"
  steps:
    - name: Setup Rust toolchains
      shell: bash
      run: |
        rustup target add thumbv7em-none-eabihf
        rustup target add riscv32imac-unknown-none-elf

    - name: Install Binsec
      shell: bash
      run: |
        sudo apt-get update
        sudo apt-get install -y libgmp-dev gcc g++ opam

        opam init -y
        opam install -y dune dune-site menhir grain_dypgen ocamlgraph zarith toml bitwuzla
        eval $(opam env)

        git clone -b $UNISIM_VERSION https://github.com/binsec/binsec
        git clone -b $BINSEC_VERSION https://github.com/binsec/unisim_archisec

        pushd unisim_archisec
        dune build @install && dune install
        popd

        pushd binsec
        dune build @install && dune install
        popd
      env:
        BINSEC_VERSION: ${{ inputs.binsec_version }}
        UNISIM_VERSION: ${{ inputs.unisim_version }}

    - name: Install cargo-checkct
      run: |
        git clone https://github.com/Ledger-Donjon/cargo-checkct
        cd cargo-checkct
        git checkout "$REF"
        cargo b --release
      shell: bash
      env:
        REF: ${{ inputs.cargo-checkct-ref }}

    - name: Run cargo-checkct
      run: |
        eval $(opam env)
        if [[ "$SKIP_UNKNOWN" == "true" ]]; then
          ./cargo-checkct/target/release/cargo-checkct run -d "$DIRECTORY" -t "$TIMEOUT" --skip_unknown
        else
          ./cargo-checkct/target/release/cargo-checkct run -d "$DIRECTORY" -t "$TIMEOUT"
        fi
      shell: bash
      env:
        DIRECTORY: ${{ inputs.directory }}
        TIMEOUT: ${{ inputs.timeout }}
        SKIP_UNKNOWN: ${{ inputs.skip_unknown }}
